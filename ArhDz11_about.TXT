https://github.com/SB44444/ArhDz11.git

Архитектура ПО (семинары)
Урок 11. Сервис-ориентированные архитектуры
Расширяем наш провект
Была одна главная страница- делаем наброски для друг страниц(Заказ, доставка, и т д в зависимости от темы . Пример - https://stealth-force-e00.notion.site/f38d6a54d65542fd97f8fc39aba36758?pvs=4). Вы это делаете для дизайнера, можно сделать и в пейнт, не надо тратить на это много время . https://www.figma.com/
Расширяем диограммы.
Пример на основе приложения для робота-пылесоса - https://geekbrainspro.notion.site/2-11-1b0361e053584d5db3f09064ef90cf2d

__
UML-диаграмма пакетов:
__
Пакеты и подсистемы: Показывает структуру пакетов и их взаимосвязи. Пакеты могут содержать классы, интерфейсы, диаграммы и другие элементы.
Отношения между пакетами: Диаграмма может показать, как пакеты связаны друг с другом, например, зависимости или ассоциации.
__
UML-диаграмма системы обновления приложения:
__
Компоненты и связи: Показывает компоненты, связанные с обновлением приложения, такие как "Клиентское приложение", "Сервер обновлений", "База данных версий".
Поток данных: Может включать поток данных от клиентского приложения к серверу обновлений и обратно.
__
UML-диаграмма домена (Domain Diagram):
__
Сущности и связи: Диаграмма домена обычно представляет ключевые сущности в системе и связи между ними. Это может быть базовая структура данных, которая влияет на всю систему.
Атрибуты: Диаграмма может также включать атрибуты, которые описывают каждую сущность.
Системы и компоненты: Если система состоит из различных подсистем или компонентов, они также могут быть показаны
__
UML-диаграмма системы обновления приложения:

Компоненты и связи: Показывает компоненты, связанные с обновлением приложения, такие как "Клиентское приложение", "Сервер обновлений", "База данных версий".
Поток данных: Может включать поток данных от клиентского приложения к серверу обновлений и обратно.

__

**Реализация:**
По мере развития проекта произедны некоторые измененмя в схеме, добавлен класс User и от него наследуется класс Cliet. В класс заказа добавлено поле Id. Для работы с базой данных добавлены классы OrderRepository и OrderRepositoryImpl. Созданы макеты всех страниц сайта. Составлены схама UML пакетов и UML схема сущностей.
__
__
__



По желанию, но крайне рекомендуется добавить к своему проекту.
Спроектировать слой  API Gateway (mobile, web), сформировать REST запросы: GET, POST, PUT, DELETE (https://swagger.io).
Предположим, у вас есть простой API для управления списком пользователей. Вам нужно описать запрос типа GET, который вернет список всех пользователей.
__
Откройте Swagger: Перейдите на сайт https://swagger.io и, возможно, создайте новую спецификацию или проект, чтобы начать описание вашего API.
__
__
Описание запроса GET:
Определите функциональность API Gateway:
__
Определите, какие функции будет выполнять ваш API Gateway. Например, это может быть маршрутизация запросов от мобильных устройств и веб-клиентов к соответствующим микросервисам.
Выберите инструмент Swagger:
__
Откройте инструмент Swagger (https://swagger.io) или его альтернативы, которые позволяют создавать и документировать API.
Создайте новую спецификацию:
__
Если используете Swagger, создайте новую спецификацию (или проект) для вашего API Gateway.
Определите эндпоинты:
__
Определите список эндпоинтов (URL-путей), которые будут доступны через ваш API Gateway. Например, /mobile и /web.
Сформируйте запросы:
__
Для каждого эндпоинта, определите HTTP-методы, которые он поддерживает (GET, POST, PUT, DELETE).
Опишите запросы:
__
Для каждого метода опишите, какие параметры (если есть) должны быть переданы в запросе, а также форматы данных запроса и ответа.
Пример запроса:
__
Предоставьте пример запроса для каждого метода, чтобы пользователи могли понять, как правильно формировать запросы.
Форматы данных:
__
Укажите, какой формат данных (обычно JSON) используется для передачи данных между клиентами и API Gateway.
Генерируйте документацию:
__
Используйте возможности инструмента Swagger для автоматической генерации документации на основе вашей спецификации. Документация должна быть понятной и информативной.
Тестирование:
__
Используйте инструмент Swagger или другие инструменты для тестирования запросов на вашем API Gateway. Убедитесь, что запросы выполняются корректно.
Документация и доступность:
__
Предоставьте ссылку на документацию вашего API Gateway. Удостоверьтесь, что другие разработчики и клиенты смогут получить доступ к этой документации.

__
Помните, что проектирование API Gateway - это описание, как клиенты (мобильные приложения, веб-приложения и т.д.) будут взаимодействовать с вашей системой через единый входной точки. Swagger поможет вам создать четкую документацию, которая упростит интеграцию с вашим API Gateway.

Пример выполнения - https://stealth-force-e00.notion.site/289383d7b8b3424f911c04b25d722c80?pvs=4
__
Задача Swagger - упростить процесс описания и документирования вашего API, а также предоставить средства для тестирования API непосредственно из документации.

/////////////////////
Что можно улучшить:
__
Обработка ошибок: Добавление более детальной обработки ошибок может сделать ваш код более надежным и устойчивым к неожиданным ситуациям.
__
Документация: Добавление комментариев и документирующих строк поможет другим разработчикам и вам самим понимать назначение классов и методов.
__
Тестирование: Для обеспечения корректности работы приложения и избегания ошибок стоит рассмотреть возможность написания модульных тестов.
__
Управление вводом данных: В задачах, где присутствует ввод данных пользователем, улучшите обработку некорректных вводов и предоставьте понятные инструкции.
__
Оптимизация: В зависимости от требований и производительности приложения, рассмотрите возможность оптимизации кода и запросов к базе данных.
__
Задачи выполнены успешно, и дальнейшее улучшение кода будет зависеть от специфики каждой из задач и ваших конкретных требований к приложению.

Пожалуйста, вот некоторые хорошие практики и примеры реализации кеширования с базой данных на SDK 19 (Android 4.4) и по работе с API:

Кеширование с базой данных:

SQLite для хранения данных: В Android SDK 19 вы можете использовать SQLite для создания и управления базой данных на устройстве. Это хороший способ хранения данных оффлайн.

ContentProvider: Если вы планируете делиться данными с другими приложениями, вы можете использовать ContentProvider для управления доступом к данным. Он также может работать с кешированием.

Caching Libraries: Вы можете использовать сторонние библиотеки для управления кешированием данных. Например, "GreenDAO" или "Room Persistence Library" (для более новых версий Android).

Использование SharedPreferences: Для небольших объемов данных, таких как настройки или ключевые значения, вы можете использовать SharedPreferences для кеширования.

Работа с API:

HttpURLConnection: Для работы с API на SDK 19 можно использовать класс HttpURLConnection для выполнения HTTP-запросов и получения ответов.

Volley: Google предоставляет библиотеку Volley, которая упрощает выполнение сетевых запросов и управление кешированием. Она предоставляет кеширование по умолчанию и удобные методы для работы с запросами.

OkHttp: Это популярная библиотека для работы с HTTP, которая также предоставляет возможности кеширования.

Retrofit: Это библиотека, основанная на OkHttp, которая предоставляет более высокоуровневый способ работы с API с использованием аннотаций.

RxJava/RxAndroid: Если вы хотите использовать реактивное программирование, библиотека RxJava предоставляет удобные операторы для выполнения асинхронных запросов и управления кешированием.

Локальное кеширование: Когда вы получаете данные из API, вы можете кешировать их локально (например, в базе данных) и использовать их при следующих запросах вместо повторного получения данных с сервера.

Обратите внимание, что подходы к кешированию и работе с API могут зависеть от конкретных требований вашего проекта. Выберите тот подход, который наиболее подходит для вашей задачи и обеспечивает эффективность и надежность.